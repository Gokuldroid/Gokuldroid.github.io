{"version":3,"sources":["webpack:///./src/components/shared/formatted-date/index.jsx","webpack:///./src/components/shared/pagination/index.jsx","webpack:///./src/components/module/blog/posts/index.jsx"],"names":["FormattedDate","render","date","Date","parse","this","props","localDate","toLocaleDateString","Component","Pagination","className","previousPage","key","to","aria-label","low","Math","max","currentPage","high","min","totalPages","items","itr","pageLink","path","push","PagintionLinks","nextPage","BlogPostGist","node","link","frontmatter","onClick","window","open","title","timeToRead","excerpt","tags","map","tag","Blog","pageContext","previousPagePath","nextPagePath","numberOfPages","humanPageNumber","data","posts","edges","edge","pageNumber","pageQuery"],"mappings":"uJAGqBA,E,gLACnBC,OAAA,WACE,IAAIC,EAAOC,KAAKC,MAAMC,KAAKC,MAAMJ,MAC7BK,EAAY,IAAIJ,KAAKD,GAAMM,qBAC/B,OACE,oCACGD,I,GANkCE,a,sBCkB3C,IAgCeC,EAhCI,SAACJ,GAClB,OACE,yBAAKK,UAAU,wBACb,wBAAIA,UAAU,qBACXL,EAAMM,aACL,wBAAID,UAAU,YAAYE,IAAI,YAC5B,kBAAC,OAAD,CAAMC,GAAIR,EAAMM,aAAcD,UAAU,YAAYI,aAAW,QAA/D,aAGM,KAxBlB,SAAwBT,GAItB,IAHA,IAAIU,EAAMC,KAAKC,IAAIZ,EAAMa,YAAc,EAAG,GACtCC,EAAOH,KAAKI,IAAIf,EAAMa,YAAc,EAAGb,EAAMgB,YAC7CC,EAAQ,GACHC,EAAMR,EAAKQ,GAAOJ,EAAMI,IAAO,CACtC,IAAIC,EAAWnB,EAAMoB,KAAKF,GACtBlB,EAAMa,cAAgBK,EACxBD,EAAMI,KAAK,wBAAIhB,UAAU,mBAAmBE,IAAKW,GAAK,kBAAC,OAAD,CAAMV,GAAIW,EAAUd,UAAU,aAAca,KAElGD,EAAMI,KAAK,wBAAIhB,UAAU,YAAYE,IAAKW,GAAK,kBAAC,OAAD,CAAMV,GAAIW,EAAUd,UAAU,aAAca,KAG/F,OAAOD,EAcAK,CAAetB,GACfA,EAAMuB,SACL,wBAAIlB,UAAU,YAAYE,IAAI,QAC5B,kBAAC,OAAD,CAAMC,GAAIR,EAAMuB,SAAUlB,UAAU,YAAYI,aAAW,QAA3D,SAGM,Q,YC9BlB,SAASe,EAAT,GAAiC,IAATC,EAAQ,EAARA,KAClBC,EAAI,UAAaD,EAAKE,YAAYP,KACtC,OACE,yBAAKQ,QAAS,kBAAMC,OAAOC,KAAKJ,EAAM,WAAWrB,UAAU,sBACzD,uBAAGA,UAAU,cAAcoB,EAAKE,YAAYI,OAC5C,uBAAG1B,UAAU,aAAb,IAA0B,kBAAC,EAAD,CAAeT,KAAM6B,EAAKE,YAAY/B,OAAhE,MAAkF6B,EAAKO,WAAvF,aACA,yBAAK3B,UAAU,aAAaoB,EAAKQ,SACjC,yBAAK5B,UAAU,aAEXoB,EAAKE,YAAYO,KAAOT,EAAKE,YAAYO,KAAKC,KAAI,SAACC,GAAD,OAAS,0BAAM7B,IAAK6B,GAAMA,MAAe,KAjBrG,0CAwCeC,UAfF,SAACrC,GAAW,IACfsC,EAAgBtC,EAAhBsC,YACAC,EAAmED,EAAnEC,iBAAkBC,EAAiDF,EAAjDE,aAAcC,EAAmCH,EAAnCG,cAAeC,EAAoBJ,EAApBI,gBAGvD,OAAQ,oCACN,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKX,MAAM,SACX,yBAAK1B,UAAU,wBACZL,EAAM2C,KAAKC,MAAMC,MAAMV,KAAI,SAACW,GAAD,OAAU,kBAACtB,EAAD,CAAcC,KAAMqB,EAAKrB,KAAMlB,IAAKuC,EAAKrB,KAAKE,YAAYP,UAC/FqB,EAAgB,EAAI,kBAAC,EAAD,CAAYzB,WAAYyB,EAAe5B,YAAa6B,EAAiBnB,SAAUiB,EAAclC,aAAciC,EAAkBnB,KAPzI,SAAC2B,GAAD,OAA+B,IAAfA,EAAmB,QAAnB,cAA2CA,KAO+F,QAVzK,IAkBaC,EAAS","file":"component---src-components-module-blog-posts-index-jsx-ff6d873decacf4a23dc3.js","sourcesContent":["\nimport React, { Component } from 'react'\n\nexport default class FormattedDate extends Component {\n  render() {\n    var date = Date.parse(this.props.date);\n    var localDate = new Date(date).toLocaleDateString();\n    return (\n      <>\n        {localDate}\n      </>\n    )\n  }\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport './styles.scss'\n\n\nfunction PagintionLinks(props) {\n  let low = Math.max(props.currentPage - 2, 1);\n  let high = Math.min(props.currentPage + 2, props.totalPages);\n  let items = [];\n  for (let itr = low; itr <= high; itr++) {\n    let pageLink = props.path(itr);\n    if (props.currentPage === itr) {\n      items.push(<li className=\"page-item active\" key={itr}><Link to={pageLink} className=\"page-link\" >{itr}</Link></li>)\n    } else {\n      items.push(<li className=\"page-item\" key={itr}><Link to={pageLink} className=\"page-link\" >{itr}</Link></li>)\n    }\n  }\n  return items;\n}\n\nconst Pagination = (props) => {\n  return (\n    <div className=\"pagination-container\">\n      <ul className=\"pagination d-flex\">\n        {props.previousPage ?\n          <li className=\"page-item\" key=\"Previous\">\n            <Link to={props.previousPage} className=\"page-link\" aria-label=\"Next\">\n              Previous\n            </Link>\n          </li> : null\n        }\n        {PagintionLinks(props)}\n        {props.nextPage ?\n          <li className=\"page-item\" key=\"Next\">\n            <Link to={props.nextPage} className=\"page-link\" aria-label=\"Next\">\n              Next\n            </Link>\n          </li> : null\n        }\n      </ul>\n    </div>\n  )\n}\n\nPagination.propTypes = {\n  totalPages: PropTypes.number,\n  currentPage: PropTypes.number,\n  nextPage: PropTypes.string,\n  previousPage: PropTypes.string,\n  path: PropTypes.func\n}\n\nexport default Pagination;","import React from \"react\"\nimport './styles.scss'\nimport { graphql } from \"gatsby\"\nimport Header from \"@components/shared/header\"\nimport FormattedDate from '@components/shared/formatted-date'\nimport Pagination from '@components/shared/pagination';\nimport SEO from \"@components/seo\";\n\nfunction BlogPostGist({ node }) {\n  var link = `/posts/${node.frontmatter.path}`\n  return (\n    <div onClick={() => window.open(link, \"_blank\")} className=\"post border-bottom\">\n      <p className=\"post-title\">{node.frontmatter.title}</p>\n      <p className=\"post-info\"> <FormattedDate date={node.frontmatter.date} /> &diams; {node.timeToRead} min read</p>\n      <div className=\"post-gist\">{node.excerpt}</div>\n      <div className=\"post-tags\">\n        {\n          node.frontmatter.tags ? node.frontmatter.tags.map((tag) => <span key={tag}>{tag}</span>) : ''\n        }\n      </div>\n    </div>\n  )\n}\n\n\nconst Blog = (props) => {\n  const { pageContext } = props;\n  const { previousPagePath, nextPagePath, numberOfPages, humanPageNumber } = pageContext;\n  const path = (pageNumber) => pageNumber === 1 ? '/blog' : `/blog/page/${pageNumber}`\n\n  return (<>\n    <Header/>\n    <SEO title=\"Blog\"/>\n    <div className=\"posts-container card\">\n      {props.data.posts.edges.map((edge) => <BlogPostGist node={edge.node} key={edge.node.frontmatter.path} />)}\n      {numberOfPages > 1 ? <Pagination totalPages={numberOfPages} currentPage={humanPageNumber} nextPage={nextPagePath} previousPage={previousPagePath} path={path} /> : null}\n    </div>\n  </>)\n}\n\nexport default Blog\n\n\nexport const pageQuery = graphql`\nquery($skip: Int!, $limit: Int!) {\n  posts: allMarkdownRemark(\n    sort: { fields: [frontmatter___date], order: DESC }\n    skip: $skip\n    limit: $limit\n  ) {\n    edges {\n      node {\n        excerpt\n        timeToRead\n        frontmatter {\n          title\n          date\n          tags\n          path\n        }\n      }\n    }\n  }\n}`;\n"],"sourceRoot":""}