{"componentChunkName":"component---src-components-module-blog-posts-index-jsx","path":"/blog/page/3","result":{"data":{"posts":{"edges":[{"node":{"excerpt":"Every programmer searches for some files more than he breathes in his life. Sometimes it is very daunting to navigate deeply nested folderâ€¦","html":"<p>Every programmer searches for some files more than he breathes in his life. Sometimes it is very daunting to navigate deeply nested folder just to run a single test file. Do you think 'Up arrow never works for me'?. Do you think 'My life is better than my bash history'?. If that so, this article is for you. Sometimes I envy people who use cmd line very efficiently. In this article, I going to show you how my cmd line journey evolved over the period (still I have lots of things to master).</p>\n<br/>\n<h5 id=\"does-native-terminal-really-work-for-you\" style=\"position:relative;\"><a href=\"#does-native-terminal-really-work-for-you\" aria-label=\"does native terminal really work for you permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Does native terminal really work for you?</h5>\n<hr>\n<p>Windows just upgraded their terminal after many many years. MAC's native terminal is good. <a href=\"https://www.slant.co/versus/1713/1715/~iterm2_vs_terminal-app\">Is it good enough?</a>.Try to find alternates that suits your need. I have used the following alternate terminals, <a href=\"https://cmder.net/\">cmder</a> - windows terminal replacement. <a href=\"https://www.iterm2.com/\">iTerm2</a> - mac os terminal replacement.</p>\n<br/>\n<h5 id=\"cmd-aliases-comes-to-rescue\" style=\"position:relative;\"><a href=\"#cmd-aliases-comes-to-rescue\" aria-label=\"cmd aliases comes to rescue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cmd aliases comes to rescue</h5>\n<hr>\n<p>Clearing cache always fixes the issue right ;-) ?.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /usr/project/master/gokuldroid \n<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">git</span> pull --rebase \n<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -rf node_modules/ \n<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -rf tmp/ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> \n<span class=\"token operator\">&amp;&amp;</span> bower <span class=\"token function\">install</span> \n<span class=\"token operator\">&amp;&amp;</span> ember s</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This magic cmd fixes all the issues for me. Over the period we add more and more cleanup methods to this command and this is difficult to remember. What if we could simply do clean_build instead.</p>\n<p>To add cmdline alias execute the cmd\nnano ~/.bash_profile or code ~/.zshrc (For vs code) or subl ~/.zshrc (For sublime users) and add alias like below,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">'cmd'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Adding alias is up to your imagination. you can add anything you want. Some really useful alias.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">clean_build</span><span class=\"token operator\">=</span><span class=\"token string\">'cd /usr/project/master/gokuldroid &amp;&amp; git pull --rebase &amp;&amp; rm -rf node_modules/ &amp;&amp; rm -rf tmp/ &amp;&amp; npm install &amp;&amp; bower install &amp;&amp; ember s'</span>\n\n<span class=\"token builtin class-name\">alias</span> .<span class=\"token operator\">=</span>cd <span class=\"token punctuation\">..</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token punctuation\">..</span><span class=\"token operator\">=</span>cd <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token punctuation\">..</span>.<span class=\"token operator\">=</span>cd <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">ga</span><span class=\"token operator\">=</span><span class=\"token string\">'git add'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gaa</span><span class=\"token operator\">=</span><span class=\"token string\">'git add .'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gaaa</span><span class=\"token operator\">=</span><span class=\"token string\">'git add --all'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gau</span><span class=\"token operator\">=</span><span class=\"token string\">'git add --update'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gb</span><span class=\"token operator\">=</span><span class=\"token string\">'git branch'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gbd</span><span class=\"token operator\">=</span><span class=\"token string\">'git branch --delete '</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gc</span><span class=\"token operator\">=</span><span class=\"token string\">'git commit'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gco</span><span class=\"token operator\">=</span><span class=\"token string\">'git checkout'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gcob</span><span class=\"token operator\">=</span><span class=\"token string\">'git checkout -b'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gcom</span><span class=\"token operator\">=</span><span class=\"token string\">'git checkout master'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gcos</span><span class=\"token operator\">=</span><span class=\"token string\">'git checkout staging'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gcod</span><span class=\"token operator\">=</span><span class=\"token string\">'git checkout develop'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gd</span><span class=\"token operator\">=</span><span class=\"token string\">'git diff'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gda</span><span class=\"token operator\">=</span><span class=\"token string\">'git diff HEAD'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">glg</span><span class=\"token operator\">=</span><span class=\"token string\">'git log --graph --oneline --decorate --all'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gld</span><span class=\"token operator\">=</span><span class=\"token string\">'git log --pretty=format:\"%h %ad %s\" --date=short --all'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gp</span><span class=\"token operator\">=</span><span class=\"token string\">'git pull'</span>\n\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gpr</span><span class=\"token operator\">=</span><span class=\"token string\">'git pull --rebase'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<h5 id=\"find-and-select-like-a-pro\" style=\"position:relative;\"><a href=\"#find-and-select-like-a-pro\" aria-label=\"find and select like a pro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>find and select like a pro</h5>\n<hr>\n<p>For this you need to install two plugins.</p>\n<p>1.<a href=\"https://github.com/facebook/PathPicker\">File path finder by facebook</a></p>\n<p><a href=\"https://asciinema.org/a/19519\" target=\"_blank\"><img src=\"https://asciinema.org/a/19519.png\" width=\"597\"/></a></p>\n<p>This plugin parses file paths in any output and provides selectable list. For example if you want to view a modified file in current repository just use </p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">git</span> status <span class=\"token operator\">|</span> fpp</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>2.<a href=\"https://github.com/junegunn/fzf\">Cmdline fuzzy finder</a></p>\n<p>This video explains the power of fuzzy finder.</p>\n<a title=\"fzf - command-line fuzzy finder\" href=\"https://www.youtube.com/watch?v=qgG5Jhi_Els\">\n  <img src=\"https://i.imgur.com/vtG8olE.png\" width=\"640\">\n</a>\n<br/>\n<br/>\n<p><em>(Note: Works at it's best if you configured default apps for the all the file types)</em></p>\n<br/>\n<br/>\n<h5 id=\"oh-my-zsh\" style=\"position:relative;\"><a href=\"#oh-my-zsh\" aria-label=\"oh my zsh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Oh My Zsh</h5>\n<hr>\n<p><a href=\"https://ohmyz.sh/\">Zsh</a> also called <a href=\"(https://ohmyz.sh/)\">Z shell</a>. It comes with a lot of features that native shell don't have (themes, plugins,spelling correction, approximate completion etc..). You can find installation docs <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\">here</a>.</p>","timeToRead":3,"frontmatter":{"title":"Better cmdline","date":"2019-06-09T12:25:19.116Z","tags":["cmdline","iterm","bash"],"render_in_place":null,"path":"better-cmdline-1"}}},{"node":{"excerpt":"At first you need to do some changes in logcat console. On the right top drop select Show only selected applications. This will filteroutâ€¦","html":"<p>At first you need to do some changes in logcat console. On the right top drop select <strong>Show only selected applications</strong>. This will filterout only the application we are working on it.</p>\n<blockquote>\n<p>All the code samples are written in kotlin.  Source code is available at <a href=\"https://github.com/Gokuldroid/AndroidTutorials\">Github</a></p>\n</blockquote>\n<p><strong>Native android logging:</strong></p>\n<p>Android has built in methods to do logging.</p>\n<p> Example,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"> <span class=\"token keyword\">val</span> TAG <span class=\"token operator\">=</span> <span class=\"token string\">\"Demo\"</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">sampleLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello log\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<img src=\"/assets/blog/android-logger/native-logger.png\" alt=\"native-logger\" style=\"width:100%\">\n<p>Simple! Is n't it?. It works well for small applications. As you can see in that picture there are lot of unnecessary logs. We can filterout by the Tag name (i.e, <strong>Demo</strong> in our case).Just type the tag name in search bar.It will show only logs with that tagname.</p>\n<p><strong>Cons:</strong></p>\n<p>1.You need to define tags each time or you have to write a helper boilerplate which adds tags automatically.I don't want to do this for all my applications , neither you.</p>\n<p>2.There is no string interpolation. (It is possible in kotlin, but in java you have to do it manually).</p>\n<p><strong>Timber from jake wharton <a href=\"https://github.com/JakeWharton/timber\">(Github link)</a></strong></p>\n<p>Example,</p>\n<p>In MainApplicaiton</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainApplication <span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BuildConfig<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Timber<span class=\"token punctuation\">.</span><span class=\"token function\">plant</span><span class=\"token punctuation\">(</span>Timber<span class=\"token punctuation\">.</span><span class=\"token function\">DebugTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            Timber<span class=\"token punctuation\">.</span><span class=\"token function\">plant</span><span class=\"token punctuation\">(</span><span class=\"token function\">CrashlyticsTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span> CrashlyticsTree <span class=\"token operator\">:</span> Timber<span class=\"token punctuation\">.</span><span class=\"token function\">Tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>priority<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>tag<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>message<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> Throwable<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>priority <span class=\"token operator\">==</span> Log<span class=\"token punctuation\">.</span>VERBOSE <span class=\"token operator\">||</span> priority <span class=\"token operator\">==</span> Log<span class=\"token punctuation\">.</span>DEBUG <span class=\"token operator\">||</span> priority <span class=\"token operator\">==</span> Log<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">//Send to crash analytics here</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">sampleLogTimber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Timber<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world from %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Gokul\"</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>This will produce log like this.</p>\n<img src=\"/assets/blog/android-logger/timber.png\" alt=\"native-logger\" style=\"width:100%\">\n<p><strong>Pros:</strong></p>\n<p>1.We can configure the logger by the build configuration easily. All we need is to give custom Timber.Tree. Crash analytics is much easier compared to android native logger.</p>\n<p>2.No need to define tags again and again. Timber will automatically all the call site class name in log.We can define tags for one log if we want to.</p>\n<p>3.String interpolation is possible and much better stack trace compared to native logger.</p>\n<p>4.Rock solid base for all kind of loggers.We can extend it like the way we want or we can integrate it with any other logger easily.</p>\n<p><strong>Cons :</strong></p>\n<p>1.No Provision to logging to a file.(We can achieve via custom timver tree).</p>\n<p>2.No log formatting provision.</p>\n<p>3.Adding custom tag is painful one.</p>\n<p><strong>Logger from orhanobut <a href=\"https://github.com/orhanobut/logger\">(Github link)</a></strong></p>\n<p>It is one of the advanced logger. It supports a lot of things like formatting, exporting logs to external storage and lot of customizations are available.</p>\n<p>Example,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token comment\">//init logger</span>\nLogger<span class=\"token punctuation\">.</span><span class=\"token function\">addLogAdapter</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">AndroidLogAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nLogger<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLogger<span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLogger<span class=\"token punctuation\">.</span><span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLogger<span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"verbose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLogger<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"information\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLogger<span class=\"token punctuation\">.</span><span class=\"token function\">wtf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What a Terrible Failure\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Customizations</span>\n\nFormatStrategy formatStrategy <span class=\"token operator\">=</span> PrettyFormatStrategy<span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">showThreadInfo</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// (Optional) Whether to show thread info or not. Default true</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">methodCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// (Optional) How many method line to show. Default 2</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">methodOffset</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// (Optional) Hides internal method calls up to offset. Default 5</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">logStrategy</span><span class=\"token punctuation\">(</span>customLog<span class=\"token punctuation\">)</span> <span class=\"token comment\">// (Optional) Changes the log strategy to print out. Default LogCat</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">tag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My custom tag\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// (Optional) Global tag for every log. Default PRETTY_LOGGER</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLogger<span class=\"token punctuation\">.</span><span class=\"token function\">addLogAdapter</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">AndroidLogAdapter</span><span class=\"token punctuation\">(</span>formatStrategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This will produce output like this,</p>\n<img src=\"/assets/blog/android-logger/logger-orhannobut.png\" alt=\"native-logger\" style=\"width:100%\">\n<p><strong>Pros :</strong></p>\n<p>1.We can add custom tags.</p>\n<p>2.We can jump to callsite from the console it self.</p>\n<p>3.We can write our own format easily.</p>\n<p>4.It provides all the things that timber has.</p>\n<p>5.Output is nicely formatted. No need to do much work to get the sample out like given in the picture.</p>\n<p>6.It supports external storage logging.</p>\n<p>7.Good documentaion.</p>\n<p><strong>Cons:</strong></p>\n<p>1.It adds two lines extra for the dashes for every log. Once you get used to that, it will be easier.</p>\n<p>There are plenty of loggers available in github.Certain loggers are specifically desinded for some purpose.These are general purpose loggers.</p>\n<p>Here is some honurable mentions,</p>\n<p><a href=\"https://github.com/promeG/XLog\">XLog</a> - Method logger.</p>\n<p><a href=\"https://github.com/noties/Debug\">Debug</a> - Has better IDE support.</p>\n<p><a href=\"https://github.com/inaka/galgo\">Galgo</a> - On screen logger.</p>\n<p>Let me know the loggers which you use for android in the comment section below.</p>","timeToRead":3,"frontmatter":{"title":"Android loggers analyzed","date":"2019-04-20T10:57:14.369Z","tags":["Android","Loggers","App development"],"render_in_place":null,"path":"android-loggers-analyzed"}}},{"node":{"excerpt":"Doing microbenchmark is really hard.benchmarking code in microseconds, nanoseconds requires a lot of things to consider.Benchmark resultsâ€¦","html":"<p>Doing microbenchmark is really hard.benchmarking code in microseconds, nanoseconds requires a lot of things to consider.<strong>Benchmark results may vary for each computer</strong>.Sometimes it differs in the same machine if you do it multiple times as the machine <strong>will be at same state ever</strong>.To keep the external noise minimum,it is advised to close all the running application so that it doesn't wait for another process to release resources.JIT compiler is playing major role optimising java code on the fly.It does some really great work but in our case, it is also a great factor to consider.For example, when you execute a function multiple times JIT optimises the code. It removes dead code (Empty methods etc, optimising bytecode, inlining functions etc). So we have to fake the JIT compiler so that it doesn't optimise our benchmarking code.In this tutorial, I am going to use JMH Gradle plugin to make tests.</p>\n<blockquote>\n<p>Source code of this tutorial can be found at : <a href=\"https://github.com/Gokuldroid/PrefMatters\">PrefMatters</a></p>\n</blockquote>\n<h4 id=\"how-to-run-\" style=\"position:relative;\"><a href=\"#how-to-run-\" aria-label=\"how to run  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to run :</h4>\n<p>Check out code\n<strong>cd dir</strong> and run cmd <strong>gradlew.bat clean &#x26;&#x26; gradlew.bat jmh</strong></p>\n<p>We will start with well known collection arraylist.</p>\n<p>Let's prepare a state class that we will use accross each test.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Constants</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> NO_OF_VALS <span class=\"token operator\">=</span> <span class=\"token number\">500000</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> vals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>NO_OF_VALS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NO_OF_VALS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\tvals<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n### **Iterating over arraylist :**\n<p>1.using foreach</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forEachList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span> constants<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Blackhole</span> blackhole<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> vals <span class=\"token operator\">=</span> constants<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> val <span class=\"token operator\">:</span> vals<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tblackhole<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>blockhole is to consume the val. If we left the loop empty JIT will optimise the loop. That we do't need in our case</p>\n</blockquote>\n<p>2.using indexed loop</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forEachIndexed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span> constants<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Blackhole</span> blackhole<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> vals <span class=\"token operator\">=</span> constants<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vals<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tblackhole<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>3.using fast indexed loop(intellij IDE says so , we will find out that soon)</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forEachFastIndexed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span> constants<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Blackhole</span> blackhole<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> vals <span class=\"token operator\">=</span> constants<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> vals<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tblackhole<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>4.using iterator</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span> constants<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Blackhole</span> blackhole<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> itr <span class=\"token operator\">=</span> constants<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tblackhole<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>5.using list iterator</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listIterator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span> constants<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Blackhole</span> blackhole<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">ListIterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> itr <span class=\"token operator\">=</span> constants<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">.</span><span class=\"token function\">listIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tblackhole<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Benchmark results:</p>\n<p>Throughput method (Higher is better):</p>\n<table>\n<thead>\n<tr>\n<th>Benchmark</th>\n<th align=\"center\">Mode</th>\n<th align=\"right\">Score</th>\n<th align=\"right\">Error</th>\n<th align=\"right\">Unit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>forEachFastIndexed</td>\n<td align=\"center\">thrpt</td>\n<td align=\"right\">372.821</td>\n<td align=\"right\">Â± 6.424</td>\n<td align=\"right\">ops/s</td>\n</tr>\n<tr>\n<td>forEachIndexed</td>\n<td align=\"center\">thrpt</td>\n<td align=\"right\">409.919</td>\n<td align=\"right\">Â± 14.473</td>\n<td align=\"right\">ops/s</td>\n</tr>\n<tr>\n<td>forEachList</td>\n<td align=\"center\">thrpt</td>\n<td align=\"right\">302.609</td>\n<td align=\"right\">Â± 6.424</td>\n<td align=\"right\">ops/s</td>\n</tr>\n<tr>\n<td>iterator</td>\n<td align=\"center\">thrpt</td>\n<td align=\"right\">343.567</td>\n<td align=\"right\">Â± 13.681</td>\n<td align=\"right\">ops/s</td>\n</tr>\n<tr>\n<td>listIterator</td>\n<td align=\"center\">thrpt</td>\n<td align=\"right\">338.176</td>\n<td align=\"right\">Â± 12.085</td>\n<td align=\"right\">ops/s</td>\n</tr>\n</tbody>\n</table>\n<br/>\nSingleshot method (Lower is better): \n<p>For 5L entries</p>\n<table>\n<thead>\n<tr>\n<th>Benchmark</th>\n<th align=\"center\">Mode</th>\n<th align=\"right\">Score</th>\n<th align=\"right\">Error</th>\n<th align=\"right\">Unit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>forEachFastIndexed</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">3.907</td>\n<td align=\"right\">Â± 0.692</td>\n<td align=\"right\">ms/op</td>\n</tr>\n<tr>\n<td>forEachIndexed</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">5.299</td>\n<td align=\"right\">Â± 0.890</td>\n<td align=\"right\">ms/op</td>\n</tr>\n<tr>\n<td>forEachList</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">5.501</td>\n<td align=\"right\">Â± 1.898</td>\n<td align=\"right\">ms/op</td>\n</tr>\n<tr>\n<td>iterator</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">5.053</td>\n<td align=\"right\">Â± 1.113</td>\n<td align=\"right\">ms/op</td>\n</tr>\n<tr>\n<td>listIterator</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">6.767</td>\n<td align=\"right\">Â± 1.569</td>\n<td align=\"right\">ms/op</td>\n</tr>\n</tbody>\n</table>\n<p>For 50 entries</p>\n<table>\n<thead>\n<tr>\n<th>Benchmark</th>\n<th align=\"center\">Mode</th>\n<th align=\"right\">Score</th>\n<th align=\"right\">Error</th>\n<th align=\"right\">Unit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>forEachFastIndexed</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">0.013</td>\n<td align=\"right\">Â± 0.002</td>\n<td align=\"right\">ms/op</td>\n</tr>\n<tr>\n<td>forEachIndexed</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">0.021</td>\n<td align=\"right\">Â± 0.020</td>\n<td align=\"right\">ms/op</td>\n</tr>\n<tr>\n<td>forEachList</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">0.025</td>\n<td align=\"right\">Â± 0.002</td>\n<td align=\"right\">ms/op</td>\n</tr>\n<tr>\n<td>iterator</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">0.024</td>\n<td align=\"right\">Â± 0.003</td>\n<td align=\"right\">ms/op</td>\n</tr>\n<tr>\n<td>listIterator</td>\n<td align=\"center\">ss</td>\n<td align=\"right\">0.029</td>\n<td align=\"right\">Â± 0.025</td>\n<td align=\"right\">ms/op</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Conclusion :</strong></p>\n<p>forEachList , iterator , listIterator yields same performance most of the time. forEach complies to iterator pattern when we compile and the working of those list internally same. indexed for loop yields better performance than iterators method.Fast index method is really means something in single invoke.Iterator implementation additionally checks for modification,makes method calls internally.In our test we used 5L objects. For smaller size result may be different.Play with this size you will get to know better.I will tend to use fast indexed loop method as my IDE does the auto-completion. This is ok for running app in PC. In android these benchmarks is really important. because we need to squeeze every cycle of CPU.</p>\n<h3 id=\"adding-elements-to-arraylist-\" style=\"position:relative;\"><a href=\"#adding-elements-to-arraylist-\" aria-label=\"adding elements to arraylist  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Adding elements to arraylist :</strong></h3>\n<p>1.Prepare size and add</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preparedAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span> constants<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Blackhole</span> blackhole<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> vals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>NO_OF_VALS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>NO_OF_VALS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tvals<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tblackhole<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>2.Just add</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span> constants<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Blackhole</span> blackhole<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> vals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span>NO_OF_VALS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tvals<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tblackhole<span class=\"token punctuation\">.</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Benchmark results:</p>\n<p>Throughput method (Higher is better):</p>\n<table>\n<thead>\n<tr>\n<th>Benchmark</th>\n<th align=\"center\">Mode</th>\n<th align=\"right\">Score</th>\n<th align=\"right\">Error</th>\n<th align=\"right\">Unit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>add</td>\n<td align=\"center\">thrpt</td>\n<td align=\"right\">180.190</td>\n<td align=\"right\">Â± 15.306</td>\n<td align=\"right\">ops/s</td>\n</tr>\n<tr>\n<td>preparedAdd</td>\n<td align=\"center\">thrpt</td>\n<td align=\"right\">257.963</td>\n<td align=\"right\">Â± 26.253</td>\n<td align=\"right\">ops/s</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Conclusion :</strong></p>\n<p>It is clear that preparing size before adding yields better performance while adding. Initally arraylist will have default capacity of 10. When the arraylist grows internal array is grown to accommodate the data.If we know the size before inserting data it is better to create array with size make <strong>ensureCapacity(size)</strong> to pre-allocate size so that we can avoid unnecessary operations like creating array,copying old array to new array etc.</p>","timeToRead":5,"frontmatter":{"title":"Java : Perf matters - 1","date":"2019-04-20T10:52:53.511Z","tags":["Java","Programming"],"render_in_place":null,"path":"java-perf-matters-1"}}}]},"categories":{"group":[{"name":"algorithm","count":1},{"name":"android","count":1},{"name":"blogging","count":1},{"name":"cmdline","count":1},{"name":"database","count":1},{"name":"general","count":1},{"name":"java","count":2},{"name":"personal","count":1},{"name":"productivity","count":4},{"name":"programming","count":5},{"name":"software development","count":2},{"name":"today I learned","count":2},{"name":"tools","count":1}]}},"pageContext":{"pageNumber":2,"humanPageNumber":3,"skip":15,"limit":10,"numberOfPages":3,"previousPagePath":"/blog/page/2","nextPagePath":""}},"staticQueryHashes":["3128451518"]}