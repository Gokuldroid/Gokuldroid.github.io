{"componentChunkName":"component---src-components-module-blog-posts-index-jsx","path":"/blog/page/2","result":{"data":{"posts":{"edges":[{"node":{"excerpt":"We can configure aliases very easily in bash or zsh. but those aliases are global to all directory. sometimes we need aliases or commandsâ€¦","html":"<p>We can configure aliases very easily in bash or zsh. but those aliases are global to all directory. sometimes we need aliases or commands only for some directories alone. this plugin makes the process easy. those aliases will be available only to that particular directory. aliases will be loaded when you <code class=\"language-text\">cd</code> into the directory and unloaded once you leave the directory.</p>\n<br>\n<h3 id=\"configure-in-zsh\" style=\"position:relative;\"><a href=\"#configure-in-zsh\" aria-label=\"configure in zsh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure in zsh</h3>\n<hr>\n<p>clone plugin from github</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/Gokuldroid/zen-alias ~/.oh-my-zsh/plugins/zen-alias</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>check if the plugin is cloned correctly</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">ls</span> ~/.oh-my-zsh/plugins</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>open .zshrc</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">open</span> ~/.zshrc</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>or</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>add zen-alias like this</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># Which plugins would you like to load?</span>\n<span class=\"token comment\"># Standard plugins can be found in $ZSH/plugins/</span>\n<span class=\"token comment\"># Custom plugins may be added to $ZSH_CUSTOM/plugins/</span>\n<span class=\"token comment\"># Example format: plugins=(rails git textmate ruby lighthouse)</span>\n<span class=\"token comment\"># Add wisely, as too many plugins slow down shell startup.</span>\n<span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">git</span>\n    zen-alias\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>updating the plugin</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>cloned directory<span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">git</span> pull</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<br>\n<h3 id=\"configure-in-bash\" style=\"position:relative;\"><a href=\"#configure-in-bash\" aria-label=\"configure in bash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure in bash</h3>\n<hr>\n<p>copy the file to root directory or somewhere in your system.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -S https://raw.githubusercontent.com/Gokuldroid/zen-alias/main/zen-alias.plugin.zsh <span class=\"token operator\">></span> ~/.zen-alias.bash</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>source the file in bashrc</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">open</span> ~/.bashrc</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>add this line at the end of the bashrc</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zen-alias.bash</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<br>\n<h3 id=\"aliases-syntax\" style=\"position:relative;\"><a href=\"#aliases-syntax\" aria-label=\"aliases syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Aliases syntax</h3>\n<hr>\n<p>Create <em>.aliases</em> file in the root directory of the project. add your per project aliases like this. You can find a sample file <a href=\"https://github.com/Gokuldroid/zen-alias/blob/main/.aliases\">here</a>.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">yc: <span class=\"token function\">yarn</span> w @zen-alias/client\nys: <span class=\"token function\">yarn</span> w @zen-alias/server\nycommon: <span class=\"token function\">yarn</span> w @zen-alias/common\nybg: <span class=\"token function\">yarn</span> w @zen-alias/bg-jobs\nyb: <span class=\"token function\">yarn</span> build\nyw: <span class=\"token function\">yarn</span> <span class=\"token function\">watch</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<h3 id=\"tips\" style=\"position:relative;\"><a href=\"#tips\" aria-label=\"tips permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tips</h3>\n<h4 id=\"excluding-the-aliases-file-in-git-tree\" style=\"position:relative;\"><a href=\"#excluding-the-aliases-file-in-git-tree\" aria-label=\"excluding the aliases file in git tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Excluding the .aliases file in git tree</h4>\n<hr>\n<p>incase if you don't want others to use your aliases, you can add it global .gitignore or project .gitignore</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~\n<span class=\"token function\">touch</span> .gitignore_global\n<span class=\"token function\">git</span> config --global core.excludesfile ~/.gitignore_global\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\".aliases\"</span> <span class=\"token operator\">></span> ~/.gitignore_global</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<h4 id=\"init-command-for-a-directory\" style=\"position:relative;\"><a href=\"#init-command-for-a-directory\" aria-label=\"init command for a directory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Init command for a directory.</h4>\n<hr>\n<p>we might want to execute some script as soon as we enter the project. like updating local branch or setting up nvm or rvm version etc. zen-alias provides an easy way for this.</p>\n<p>define a zen-alias like this,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">init_zen_dir: nvm use <span class=\"token operator\">&amp;&amp;</span> rvm use</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>","timeToRead":2,"frontmatter":{"title":"Local aliases using zen aliases","date":"2021-02-05T19:22:59.656Z","tags":["cmdline","zsh","bash"],"render_in_place":null,"path":"zen-alias"}}},{"node":{"excerpt":"I was reading a book called Outliers . that made me retrospect my life and the role of luck in my life. There are a lot of factors for one'sâ€¦","html":"<p>I was reading a book called <strong>Outliers</strong> . that made me retrospect my life and the role of luck in my life. There are a lot of factors for one's success, even with a better personal life with some support from others, one can have an edge in your professional life. There are things we can't control in your life. For example, our birthplace or the time. You and the person who works in a different country doing the same job might be earning and getting more rewards than you. It doesn't mean that you're doing less work and you're not capable. you're just in the wrong place. To be successful, one has to be in the right place at the right time. </p>\n<p>As a developer, I want stats or exact numbers, not just the stories. So, I decided to simulate the role of luck in an interview. I assumed luck just plays 5% in the interview selection and wanted to compare with the interview result that's purely dependant on talent.</p>\n<p><strong>Simulation process:</strong></p>\n<p>1.There will be 500 persons with uniformly distributed random luck and talent on a scale of 0 - 100.</p>\n<p>2.There are two scores with/without luck. </p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">score</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getTalent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// assuming luck plays just 5 percent in your life</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">scoreWithLuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getTalent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.95</span> <span class=\"token operator\">+</span> <span class=\"token function\">getLuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>3.I will select 10 percent of total people based on these two scores as a two separate selection group.\n4.compare the selection and find out how much luck can make a difference in the final result.</p>\n<p>To my surprise, even <strong>5%</strong> luck made a difference up to <strong>24%</strong> when I run the simulation ten times. To give you some idea, if a hundred people are getting interviewed for ten positions, you might be one of two persons who get rejected because of luck.</p>\n<p>But if you do the interview twice, your chance of getting rejected because of luck is <strong>24% of 24%</strong> (<strong>5%</strong>). So, try one more time and prove <strong>luck means nothing in your life</strong>.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Luck</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pickSize <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> withoutLuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingDouble</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">score</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> withLuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingDouble</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">scoreWithLuck</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            person<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            person<span class=\"token punctuation\">.</span><span class=\"token function\">setTalent</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            person<span class=\"token punctuation\">.</span><span class=\"token function\">setLuck</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            withLuck<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            withoutLuck<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> selectedWithLuck <span class=\"token operator\">=</span> withLuck<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>pickSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> selectedWithoutLuck <span class=\"token operator\">=</span> withoutLuck<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>pickSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> blindLuck <span class=\"token operator\">=</span> selectedWithLuck<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>selectedWithoutLuck<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"with luck\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>selectedWithLuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"without luck\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>selectedWithoutLuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blind selection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>blindLuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blind luck %\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> blindLuck<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> pickSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> talent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> luck<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getTalent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> talent<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTalent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> talent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>talent <span class=\"token operator\">=</span> talent<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getLuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> luck<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLuck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> luck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>luck <span class=\"token operator\">=</span> luck<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">score</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getTalent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// assuming luck plays just 5 percent in your life</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">scoreWithLuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getTalent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.95</span> <span class=\"token operator\">+</span> <span class=\"token function\">getLuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","timeToRead":3,"frontmatter":{"title":"You tried hard and you gave your best! still you failed and it's ok!","date":"2020-11-20T03:41:38.083Z","tags":["personal","motivation","outliers"],"render_in_place":null,"path":"you-tried-hard-and-failed-its-ok"}}},{"node":{"excerpt":"Remembering the branches and all the available commands are daunting work in git. what if the commands auto-completes itself like shown inâ€¦","html":"<img src=\"/assets/blog/git-autocompletion/git-autocompletion.gif\" alt=\"git auto completion\" style=\"width:100%\">\n<p>Remembering the branches and all the available commands are daunting work in git. what if the commands auto-completes itself like shown in the above gif. we can save a lot of typing. not all of us have a typing speed of 90+ wpm right?.</p>\n<p>For this, we need to configure our terminal with git auto-completion snippet. you can download the bash-completion file from <a href=\"https://github.com/git/git/tree/master/contrib/completion\">here</a>.\nDownload the file from these links if you're using <a href=\"https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash\">bash</a>, or <a href=\"https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.zsh\">zsh</a> or <a href=\"https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh\">shell</a>.</p>\n<p>You can download with simple curl command also like this,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>and add the downloaded file in <em>~/.bashrc</em> or <em>~/.zshrc</em> depends on your terminal like this.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\"># bash</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f ~/.git-completion.bash <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">.</span> ~/.git-completion.bash\n<span class=\"token keyword\">fi</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token comment\">#zsh</span>\n<span class=\"token builtin class-name\">source</span> ~/.git-completion.bash</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>restart the terminal and enjoy the git auto-completion.</p>","timeToRead":1,"frontmatter":{"title":"Git autocompletion","date":"2020-11-08T12:30:34.813Z","tags":["git","cmdline"],"render_in_place":null,"path":"git-autocompletion"}}},{"node":{"excerpt":"I've been trying to write a documentation page for my project (An android app to control your VLC media player) for a very long time. Iâ€¦","html":"<p>I've been trying to write a <a href=\"https://codefromdude.com/vlc-docs/\">documentation</a> page for my <a href=\"https://play.google.com/store/apps/details?id=tuple.me.vlcremote\">project</a> (An android app to control your VLC media player) for a very long time. I decided to use some static site builders to get it done quickly. </p>\n<p>I am already using <a href=\"https://www.gatsbyjs.org/\">gatsby</a> for my <a href=\"http://codefromdude.com/\">blog</a>. I thought of building my gatsby theme as I am pretty much satisfied by Gatsby. but it takes lots of time. </p>\n<p>In this post, I will share my opinions on documentation tools that I have considered for my project. </p>\n<p><strong>My requirements are:</strong></p>\n<ul>\n<li>Appearance should align with my product theme.</li>\n<li>It should be user friendly as I am going to use it for one of my android apps (not just for developers).</li>\n<li>It should be SEO friendly.</li>\n<li>Now I don't have any complex requirements. but it should be extendable in the future.</li>\n<li>It should be hostable in GitHub pages using a new repo other than my personal page repo. I didn't want to pollute my blog with docs logic as I might add few more docs for some other projects.</li>\n<li>It shouldn't require much configuration/learning for up and running. </li>\n<li>It should be simple.</li>\n</ul>\n<p><strong><a href=\"https://brainhubeu.github.io/gatsby-docs-kit/\">Gatsby-docs-kit</a>:</strong></p>\n<p><strong>Pros:</strong> </p>\n<ul>\n<li>Based on gatsby.   </li>\n<li>Easily customizable.   </li>\n<li>We can host it on GitHub.</li>\n</ul>\n<p><strong>Cons:</strong> </p>\n<ul>\n<li>Too much to do for documentation.</li>\n<li>Not SEO friendly. but we can configure using plugins available for gatsby. (I didn't want to do that again for docs).</li>\n</ul>\n<p><strong><a href=\"https://docsify.js.org/#/?id=docsify\">Docsify</a>:</strong></p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Easy to set up.</li>\n<li>Comes with four predefined themes. we can easily create our own themes using this <a href=\"https://jhildenbiddle.github.io/docsify-themeable/#/quick-start?id=hosting\">tool</a>.</li>\n<li>Configurable using plugins. we can write our plugins too.</li>\n<li>We can build it and host it GitHub.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Not SEO friendly.</li>\n</ul>\n<p><strong><a href=\"https://www.gitbook.com/\">GitBook</a></strong> : (<em>I want to try this in future</em>):</p>\n<p>Some sample sites using Gitbook <a href=\"https://docs.timber.io/\">Timber</a>.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>SEO friendly.</li>\n<li>No need to set up in our local machine. It is free for personal use.</li>\n<li>It comes with powerful analytics.</li>\n<li>Drag and drop UI. </li>\n<li>It requires less programming knowledge.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Vendor lockdown.</li>\n<li>We're limited by the customization they provide.</li>\n<li>We can't host it on our own.</li>\n</ul>\n<p><strong><a href=\"https://github.com/timberio/gitdocs\">Gitdocs</a>:</strong></p>\n<p>I stumbled up this framework after seeing dev.to's <a href=\"https://docs.dev.to/technical-overview/stack/\">documentation</a>. It is very easy to configure. I felt some limitations from the beginning itself.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>SEO friendly.</li>\n<li>We can build it and host it GitHub.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>No theming support as of now.</li>\n<li>Not maintained very actively (The last commit was made 2 years back). I feel the development has been stopped.</li>\n<li>My primary GitHub page is <a href=\"https://gokuldroid.github.io\">https://gokuldroid.github.io</a>. If I have another project  the public URL will look like this <a href=\"https://gokuldroid.github.io/%7Bproject_name%7D\">https://gokuldroid.github.io/{project_name}</a>. This setup is not easy with Gitdocs. There are open issues and <a href=\"https://github.com/timberio/gitdocs/pull/172\">PR</a> related to this.</li>\n<li>Not customizable.</li>\n</ul>\n<p><strong><a href=\"https://daux.io/\">Daux.io</a></strong></p>\n<p>Some sample sites using this framework <a href=\"https://docs.pixolution.org/#/\">pixolution</a> , <a href=\"https://doc.soisy.it/en/Introduction.html\">soisy</a>.</p>\n<p><strong>Props:</strong></p>\n<ul>\n<li>It has multilingual support.</li>\n<li>We can build it and host it GitHub.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>The default theme is not user friendly.</li>\n<li>There is no much documentation for customization. but some sites using this framework has a really good look and feel.</li>\n<li>Only the homepage and documentation page is available. we can't add custom pages.</li>\n<li>Not extendable. </li>\n</ul>\n<p><strong><a href=\"https://www.mkdocs.org/\">MkDocs</a>:</strong></p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Very popular and actively maintained (10K stars in GitHub)</li>\n<li>Lots of <a href=\"https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes\">predefined themes</a> available.</li>\n<li>We can build it and host it GitHub.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Based on python might not work very well with other frontend tools.</li>\n</ul>\n<p><strong><a href=\"https://v2.docusaurus.io/\">Docusaurus</a>:</strong></p>\n<p>There are two major versions of docusaurus. versions two is still in beta and it doesn't have some of the features of version one. but the road map of docusaurus 2 seemed interesting to me. So I wanted to give it a try for my blog.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>It is maintained by Facebook.</li>\n<li>Easily themeable. It uses <a href=\"https://facebookincubator.github.io/infima\">infima</a> under the hood (Note: this also still in beta).</li>\n<li>It comes with a lot of predefined configurations.</li>\n<li>Lots of facebook's open-source projects use this for documentation.</li>\n<li>It has lots of flexibility.</li>\n<li>We can build it and host it GitHub.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Version 2 still in beta (but it is pretty much stable).</li>\n</ul>\n<p>Based on the observations, I've decided to use docusaurus beta for my app's documentation. You can take a look at the final site <a href=\"https://codefromdude.com/vlc-docs/\">here</a> and source code <a href=\"https://github.com/Gokuldroid/vlc-docs\">here</a>. Let me know, what is your personal choice in documentation tools and why.</p>","timeToRead":4,"frontmatter":{"title":"Evaluating documentation frameworks for personal projects.","date":"2020-05-03T06:10:35.547Z","tags":["Documentation","GitBook","MkDocs","Docsify","Gitdocs","Daux","Docusaurus"],"render_in_place":null,"path":"eval-documentation-frameworks-for-personal-projects"}}},{"node":{"excerpt":"Some of us might have come across very crazy ideas throughout our programming career. when I started my programming career, I didn't knowâ€¦","html":"<p>Some of us might have come across very crazy ideas throughout our programming career. when I started my programming career, I didn't know open source and benefits of it back then. I didn't know the best practices and SDLC etc. I have written some shit code to get the things done. I don't even have source code for some of those projects now.I wanted to develop some of these things just to learn even if some opensource version available out there. still I am doing this. but still those projects remind me about my progress from a newbie to senior software developer at <a href=\"https://freshworks.com/\">Freshworks</a>.</p>\n<blockquote>\n<p>Thumb rule: No one should be using your projects now including you.</p>\n</blockquote>\n<p><strong>FLAMES</strong></p>\n<p>For those who don't know what flames check out this <a href=\"https://www.wikihow.com/Play-%22Flame%22\">link</a>.\nI developed a GUI application using java and I had two input boxes and a button. fairly simple application. but it took me a day to build back then. In that simple application also, I faced the null pointer exception for some inputs. I didn't bother to fix it as it worked very well for my name and all of my crush's name. my job is done.</p>\n<p><strong><em>Tools used: Java, netbeans</em></strong></p>\n<hr>\n<p><strong>Calculator</strong></p>\n<p>A simple Java GUI application. I got some wired errors due to integer overflow. I didn't know how to solve it, thus my application input was limited to Long.MAX_VALUE. I could have used BigInt to support some really big numbers. But I was limited by the technology of my time (complete reference java :P).</p>\n<p><strong><em>Tools used: Java, eclipse</em></strong></p>\n<hr>\n<p><strong>Syllabus app</strong></p>\n<p>My first widely used android app by my college friends. An app containing all my college syllabus. It had tab view and dropdown view and lots of text views. I didn't know about DB and content management system when I developed this app. So I hardcoded all data into android layouts (every subject, every semester had a xml layout). that's shit lots of work. But I got lots of positive reviews. I released my app on Facebook as I didn't have a play store account at that time. It is deeply buried in <a href=\"https://www.facebook.com/gokul.prabhu.droid/\">FB feed</a>. you can search for it if you're bored.</p>\n<p><strong><em>Tools used: Java, eclipse with ADT plugin</em></strong></p>\n<hr>\n<p><strong>TicTocToe</strong></p>\n<p>An app to play tic-tac-toe over bluetooth.I did complete testing with lots of phones. surprisingly it worked very well in most of the phone. I released this app also in FB. I changed my email, username everything to Gokuldroid because of craze I had on android.</p>\n<p><strong><em>Tools used: Java, eclipse with ADT plugin</em></strong></p>\n<hr>\n<p><strong>Kurukshetra app</strong></p>\n<p>I developed this app for my college tech fest. My first app to reach 2k downloads in play store (P.S: Not my account).</p>\n<p><strong><em>Tools used: Java, Android studio beta</em></strong></p>\n<hr>\n<p><strong>The Hindu news reader</strong></p>\n<p>My first app to use a backend system. I built using the RSS feed of the Hindu newspaper website. </p>\n<p><strong><em>Tools used: Java, Android studio beta</em></strong></p>\n<hr>\n<p><strong>Secure bay</strong></p>\n<p>Phone lock screen app that captures the face using the front camera if you enter the password wrongly. I wanted to use pattern unlock but I didn't know how to develop a gesture-based app. source code can be found <a href=\"https://github.com/Gokuldroid/SecureBay\">here</a>.</p>\n<p><strong><em>Tools used: Java, Android studio beta</em></strong></p>\n<hr>\n<p><strong>Vision website</strong></p>\n<p>I developed this site after watching lots of tutorials on youtube and reading lots of books about PHP, angular js (very old version). It is not a responsive one. it will break if you view in mobile phone. I purchased a Godaddy account with the fund I got from my college. I also used Godaddy account's ssh access as socks proxy to bypass my college wifi restrictions.source code can be found <a href=\"https://github.com/Gokuldroid/Vision\">here</a>.</p>\n<p><strong><em>Tools used: PHP, angular js, sublime</em></strong></p>\n<hr>\n<p><strong>Gola: static site generator</strong></p>\n<p>I wanted to experiment on a node js project. this is the result of it.source code can be found <a href=\"https://github.com/Gokuldroid/gola\">here</a>.</p>\n<p><strong><em>Tools used: Javascript, nodejs, handlebars, express</em></strong></p>\n<hr>\n<p><strong>Some shit cli tools</strong></p>\n<p><a href=\"https://github.com/Gokuldroid/cli\">cli</a></p>\n<p><a href=\"https://github.com/Gokuldroid/easy-cli\">easy-cli</a></p>\n<p><strong><em>Tools used: Typescript, node js</em></strong></p>\n<hr>\n<p><strong>Easy google play</strong></p>\n<p>A Gradle plugin to publish app. source code can be found <a href=\"https://github.com/Gokuldroid/EasyGooglePlay\">here</a>.</p>\n<p><strong><em>Tools used: Kotlin</em></strong></p>\n<hr>\n<p><strong>OMP DSL</strong></p>\n<p>DSL builder to generate XML entries. source code can be found <a href=\"https://github.com/Gokuldroid/omp-dsl\">here</a>.</p>\n<p><strong><em>Tools used: Kotlin</em></strong></p>\n<hr>\n<p><strong>Grunner - A vscode extension</strong> </p>\n<p>source code can be found <a href=\"https://github.com/Gokuldroid/grunner\">here</a>.</p>\n<p><strong><em>Tools used: Typescript</em></strong></p>","timeToRead":4,"frontmatter":{"title":"Show me your projects graveyard!","date":"2020-04-22T14:25:34.217Z","tags":["Personal projects","Side projects","Learnings"],"render_in_place":null,"path":"show-me-your-projects-graveyard"}}},{"node":{"excerpt":"Assume that we need to join two tables based on some condition. For example, Both queries do the same. we are saving 3 words in the firstâ€¦","html":"<p>Assume that we need to join two tables based on some condition. For example,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> users<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">from</span> users<span class=\"token punctuation\">,</span> accounts <span class=\"token keyword\">where</span> users<span class=\"token punctuation\">.</span>account_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">AND</span> users<span class=\"token punctuation\">.</span>account_id <span class=\"token operator\">=</span> accounts<span class=\"token punctuation\">.</span>id</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<br/>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> users<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> accounts<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">from</span> users <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> accounts <span class=\"token keyword\">on</span> accounts<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span>account_id <span class=\"token keyword\">where</span> users<span class=\"token punctuation\">.</span>account_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Both queries do the same. we are saving 3 words in the first query (this might help you to save 9 secs for every join you make).</p>\n<p>Check the query plan for both of these queries, It will be same. Iâ€™ve checked this with MySql and Pgsql. I hope this will work in most of the DBMS systems. Let me know if you have any tricks like this.</p>","timeToRead":1,"frontmatter":{"title":"One minute tips : Less noise in SQL joins","date":"2020-02-25T17:29:40.001Z","tags":["MySql","productivity"],"render_in_place":null,"path":"one-min-tip-less-noice-in-sql-joins"}}},{"node":{"excerpt":"I have been using VS code and cmdline for git. But I always miss something. Autocompletion is not perfect in cmdline and GIT tower is bitâ€¦","html":"<p>I have been using VS code and cmdline for git. But I always miss something. Autocompletion is not perfect in cmdline and GIT tower is bit costly. So, I created <a href=\"https://github.com/Gokuldroid/nit\">this</a> to make git cmdline experience better.</p>\n<br/>\n<h5 id=\"installation\" style=\"position:relative;\"><a href=\"#installation\" aria-label=\"installation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installation:</h5>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g @lazyloop/nit</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<br/>\n<h5 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage:</h5>\n<br/>\n<p><strong>help:</strong></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"> nit -h</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p> or </p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">nit <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span> -h</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<br/>\n<hr>\n<p><strong>checkout branch:</strong></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"> nit checkout <span class=\"token punctuation\">[</span>-r<span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<img src=\"https://raw.githubusercontent.com/Gokuldroid/nit/master/samples/nit_checkout.gif\" alt=\"demo git checkout\" style=\"width: 100%;\">\n<br/>\n<hr>\n<p><strong>delete branches:</strong></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"> nit delete <span class=\"token punctuation\">[</span>-m<span class=\"token operator\">&lt;</span>multiple<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<img src=\"https://raw.githubusercontent.com/Gokuldroid/nit/master/samples/nit_delete.gif\" alt=\"demo git delete\" style=\"width: 100%;\">\n<br/>\n<hr>\n<p><strong>stage files to commit:</strong></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"> nit <span class=\"token function\">add</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<img src=\"https://raw.githubusercontent.com/Gokuldroid/nit/master/samples/nit_add.gif\" alt=\"demo git add\" style=\"width: 100%;\">\n<br/>\n<hr>\n<p><strong>discard local changes:</strong></p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"> nit discard</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<img src=\"https://raw.githubusercontent.com/Gokuldroid/nit/master/samples/nit_discard.gif\" alt=\"demo git discard\" style=\"width: 100%;\">\n<br/>","timeToRead":1,"frontmatter":{"title":"A missing cmdline util for GIT - NIT","date":"2020-01-18T07:52:06.942Z","tags":["GIT","cmdline","tools"],"render_in_place":null,"path":"git-cmdline-util"}}},{"node":{"excerpt":"I tried to book a ticket in irctc. while giving CCV of my debit card (*mandatory field), accidentally I gave empty value and proceeded toâ€¦","html":"<img src=\"/assets/blog/null-vs-empty/null-vs-empty-cover.jpeg\" alt=\"null vs empty\" style=\"width:100%\">\n<br/>\n<br/>\n<p>I tried to book a ticket in <a href=\"https://www.irctc.co.in\">irctc</a>. while giving CCV of my debit card <strong>(*mandatory field)</strong>, accidentally I gave empty value and proceeded to book a ticket. It threw an error after refreshing the whole page as the validation happened (or something went wrong) in the backend. they might have handled in frontend itself. Because of this, I lost my booking window. They might handle millions of requests per day. but they simply failed at this. </p>\n<blockquote>\n<p>It should be a common-sense for a developer to handle null vs empty. To\nerr is human. but repeating history is not acceptable.</p>\n</blockquote>\n<p>I've used a good number of programming languages (Typescript, Java, Kotlin, Ruby, Javascript, Python, C++, C, PHP). There are days I assumed the user is not dumb enough to give empty values for username or password. I haven't developed a real-world software back then. Handling null and empty is always an art. Some programming languages are good at that. Some of them shout like Kotlin <strong>'Yes! we support null safety in our language'</strong>. I am not going to give you the definition of null or empty. Do some research and fight with your colleagues about null vs Empty. You will hear some interesting story. I will throw some snippets from the languages I've used so far. Different languages handle them slightly differently. You will get a better understanding of null vs Empty argument once you know about it.</p>\n<p>Let's take java first,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">int</span> countInner<span class=\"token punctuation\">;</span>  \n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>countInner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>This one won't compile. It will throw an error, saying variable not initialized. Let's deceive the complier.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> countInner<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>countInner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>Yey!! it got complied. What will be the output of this? Can you guess?.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">null</span>  \n<span class=\"token number\">0</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<br/>\n<p>Why the compiler let us compile successfully this time?. When that is a local variable compiler will know for sure that is not yet assigned to any value. we can assign values outside of this method, so there is a possibility of non-empty value inside this function. Thus java compiler won't prevent us from compiling. What if we didn't assign any values to these variables and use these variables like this,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> count<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>Oops! Here comes the NullPointerException. Now you have some idea about null problem right?.</p>\n<p>Let's move on to Empty,</p>\n<p>There is a slight difference between no password was given and an empty password. Take a look at this snippet.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">validPassword</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token keyword\">return</span> password <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">function</span> <span class=\"token function\">validPassword2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token keyword\">return</span> password <span class=\"token operator\">!=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">function</span> <span class=\"token function\">validPassword3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token keyword\">return</span> password <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validPassword</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validPassword2</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validPassword2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validPassword3</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validPassword3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>the output of this will be,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token boolean\">true</span>  \n<span class=\"token boolean\">false</span>  \n<span class=\"token boolean\">true</span>  \n<span class=\"token boolean\">false</span>  \n<span class=\"token boolean\">true</span>  \n<span class=\"token boolean\">true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>To get a better understanding of this, take a look at this javascript truth table. What if your password validation just checks against null or undefined, you will be allowing the user to have an empty password.</p>\n<h5 id=\"for--comparison\" style=\"position:relative;\"><a href=\"#for--comparison\" aria-label=\"for  comparison permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For, == comparison</h5>\n<br/>\n<img src=\"/assets/blog/null-vs-empty/truth-table-double-eq.png\" alt=\"javascript comparison table\" style=\"width:100%\">\n<br/>\n<br/>\n<h5 id=\"for--comparison-1\" style=\"position:relative;\"><a href=\"#for--comparison-1\" aria-label=\"for  comparison 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For, === comparison</h5>\n<br/>\n<img src=\"/assets/blog/null-vs-empty/truth-table-triple-eq.png\" alt=\"javascript comparison table\" style=\"width:100%\">\n<p>weird isn't it?. (Javascript is always weird ;-))</p>\n<p>Some programming languages provide safety against some of these issues.</p>\n<br/>\n<h5 id=\"in-java\" style=\"position:relative;\"><a href=\"#in-java\" aria-label=\"in java permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In Java,</h5>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NonNull</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longToIp</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Long</span> ip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ip <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span>  \n\t\t  <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ip <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span>  \n\t\t  <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ip <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span>  \n\t\t  <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>But you need to configure tools like FindBugs to get errors and warnings, Can't be better than this?. In some languages null safety is tied into the language itself. thus provides better support for null safety.</p>\n<br/>\n<h5 id=\"in-kotlin\" style=\"position:relative;\"><a href=\"#in-kotlin\" aria-label=\"in kotlin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In Kotlin,</h5>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span>  \na <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// compilation error</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>More details about <a href=\"https://kotlinlang.org/docs/reference/null-safety.html\">kotlin null safety</a>, </p>\n<br/>\n<h5 id=\"in-typescript-javascript-with-types\" style=\"position:relative;\"><a href=\"#in-typescript-javascript-with-types\" aria-label=\"in typescript javascript with types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In typescript (Javascript with types),</h5>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>  \nname <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// compilation error</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>More details about <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\">typescript null safety</a></p>\n<p>Did you notice something?. No one provides safety against empty values. Because of this, a lot of frameworks and libraries have utils to check empty value.</p>\n<ul>\n<li><a href=\"https://guava.dev/releases/19.0/api/docs/com/google/common/base/Strings.html\">Guava</a></li>\n<li><a href=\"https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html\">Apache</a></li>\n<li><a href=\"http://api.emberjs.com/ember/3.10/functions/@ember%2Futils/isEmpty\">Ember</a></li>\n<li><a href=\"https://lodash.com/docs/4.17.15#isEmpty\">Lodash</a></li>\n</ul>\n<p>While writing code, keep asking one thing, <strong>\"Should I handle empty state?\"</strong>. Handling null and empty state everywhere is also bad. As a rule of thumb, Don't use optional values in the place of mandatory values. If we strictly need a value, throw an error early on, if it null. Please keep this in mind <strong>'there might be a stupid person like me who never reads the instructions'</strong>.</p>\n<p><strong>\"Should a function return null or empty?\"</strong>  is a whole new argument, let's save that for another day.</p>","timeToRead":4,"frontmatter":{"title":"NULL vs Empty","date":"2019-09-14T18:21:41.620Z","tags":["NULL","empty","programming"],"render_in_place":null,"path":"null-vs-empty"}}},{"node":{"excerpt":"Have you came across this meme?\n\n\n We could say this as backend developer - public api - source code. We have a rich set of collections andâ€¦","html":"<p>Have you came across this meme?\n<img src=\"/assets/blog/java-internals/frontend_vs_backend.png\" alt=\"native-logger\" style=\"width:100%\">\n<br>\n<br></p>\n<blockquote>\n<p>We could say this as <strong>backend developer - public api - source code</strong>.</p>\n</blockquote>\n<p>We have a rich set of collections and public API in java. We don't need to know the internals of those collections and API in our daily life. But there is a beauty in the internals of Java API's. Here are some of the things I found in the internals of Java's ArrayList code.I assume that you already about ArrayList and the basics about Java collections.</p>\n<p>You can get the complete source code from, <a href=\"https://github.com/openjdk/jdk13/blob/1e8806fd08aef29029878a1c80d6ed39fdbfe182/src/java.base/share/classes/java/util/ArrayList.java\">ArrayList.java</a>.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">//Line : 189</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RandomAccess</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span><span class=\"token class-name\">Serializable</span>\n<span class=\"token punctuation\">{</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The first thing that caught my eyes is <strong>RandomAccess</strong> interface. It's just an <strong>empty</strong> interface without any methods or code. It is used just to denote the underlying collection is randomly accessible (Denotes any element of the collection can be accessed at a constant time). Java doesn't support multiple inheritance. But we we can implement multiple interfaces. This might became handy to check the collection is Randomly accessible with constant time. </p>\n<hr>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// Line : 137</span>\n<span class=\"token keyword\">transient</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elementData<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Wow!. ArrayList is nothing but plain array internally. ArrayList is just a wrapper on the array. We can write own simple ArrayList. But that might not be performant. But it is always a good thing to try.</p>\n<hr>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">//Line : 179</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elementData <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// defend against c.toArray (incorrectly) not returning Object[]</span>\n        <span class=\"token comment\">// (see e.g. https://bugs.openjdk.java.net/browse/JDK-6260652)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n            elementData <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// replace with an empty array.</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>elementData <span class=\"token operator\">=</span> EMPTY_ELEMENTDATA<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Well! It's not a bug, It's a feature ;-). Go through the bug <a href=\"https://bugs.openjdk.java.net/browse/JDK-6260652\">link</a> mentioned in the code. We can see how they track bugs in JDK.</p>\n<p>Some elegant code in this snippet,</p>\n<ul>\n<li>Arrays.copyOf - Optimized method to make a copy of an array.</li>\n<li>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// We could have wrote this as </span>\nsize <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">.</span>length\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// But first one is much elegant. When we look into the byte code of these two snippets, there is subtle difference. You can dig into it if you want to learn more about it.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<hr>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// Line: 197</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">trimToSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&lt;</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      elementData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">?</span> EMPTY_ELEMENTDATA\n        <span class=\"token operator\">:</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The first usage of <strong>modCount++</strong>. we will be seeing this snippet more often in this source code. There is a reason for incrementing this variable. If you know the reason already, kudos to you ;-). If you don't know this already, search for the similar lines in the source code. There is a similarity among the methods which has this line. I will tell you why at the end.</p>\n<hr>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// Line : 287</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">indexOfRange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> es <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Why they are storing elementData in local variable? any guesses?. One thing I can find is, local variable lookup is faster than class variable lookup. Might be there are some other reasons.\n<br/>\n<br/>\no.equals(es[i]), es[1].equals(o). Is it equal?. Why they didn't use the later one?. Any thoughts?. </p>\n<p>For example, we can have something like this,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Demo</span><span class=\"token punctuation\">></span></span> vals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvals<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//You know this already.</span>\nvals<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You might know this as well already. (DemoChild is inherited from Demo). </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>When we have a custom equals, Implementation, we might be in the situation that, demo.equals(demoChild) is true and demoChild.equals(demo) is false. They let us decide on the implementation details if we have custom equal function.</p>\n<hr>\n<p>Here comes the prodigal son.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkForComodification</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> expectedModCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modCount <span class=\"token operator\">!=</span> expectedModCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentModificationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I asked about <strong>modCount++</strong> before right. All the methods increments modCount that mutate the ArrayList in some manner. In a multi-threaded environment, to ensure all the methods are <a href=\"https://en.wikipedia.org/wiki/Reentrancy_(computing)\">reentrant</a>, we check for modCount in some places.</p>\n<p>For example,</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> expectedModCount <span class=\"token operator\">=</span> modCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">hashCodeRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">checkForComodification</span><span class=\"token punctuation\">(</span>expectedModCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>hashCodeRange</strong> calculation is a long process, By that time some other thread might modify the content of the ArrayList. To ensure this method doesn't return invalid hasCode, at the end of long computation, we are checking for <strong>modCount is same as expectedModCount</strong>. If that's different the content is modified by another thread and the result that we computed is invalid. In such cases, this will throw <strong>ConcurrentModificationException</strong>.</p>\n<hr>\n<p>Comment below if you find this useful or requires any modification in the article :-).</p>","timeToRead":4,"frontmatter":{"title":"Java internals : part - 1","date":"2019-06-17T18:21:41.620Z","tags":["Java","JDK","ArrayList"],"render_in_place":null,"path":"java-internals-1"}}},{"node":{"excerpt":"Dependency management is always hell.I was a bully once in updating my android app dependencies. Until that dark day came into the pictureâ€¦","html":"<p>Dependency management is always hell.I was a bully once in updating my android app dependencies. Until that dark day came into the picture. Suddenly my app uninstallation events went up. Firebase crash reports waking me up now and then. I don't have billions of users. But still, I have some loyal users (I have around 2L. Not bad for some app developed for my personal use. If you are VLC user you can give it a shot - <a href=\"https://play.google.com/store/apps/details?id=tuple.me.vlcremote&#x26;hl=en\">VLC Stream and remote</a>).</p>\n<p>The update was very simple. I just wrapped my code in the try catch block to avoid crash ( I am yet to find the perfect solution for that ;-)) and updated some dependencies. that's it. The culprit was one of the support dependency I updated before. It broke the functionality of splash screen.without it, everything is meaningless in my app. As an indie developer, I don't have much time to test our pet projects and I don't have extensive test cases in my project. </p>\n<p>After that I have always thought, '<em>Why should I change something that isn't broken yet?</em>'. I was reluctant to change to support library dependencies until I had no other go. Because it always broke something in android. Android versioning was not great until they announce <a href=\"https://android-developers.googleblog.com/2018/05/announcing-new-sdk-versioning.html\">this</a>. </p>\n<p>The same applies to node projects, ember, react, angular, etc. while choosing dependencies, check whether it follows SemVer. Otherwise, make note of it in package.json (if you are in node projects) or build.gradle (if you are in android projects).So that you can be careful while updating those dependencies. To make our life easier, there are a set of rules that makes this process easier. semantic versioning (SemVer) is something that we can follow in our app releases too.</p>\n<br/>\n<blockquote>\n<p>SemVer is defined as major.minor.patch-(alpha/beta).As simple as that.\nEx, (1.2.14, 1.2.14-alpha). </p>\n</blockquote>\n<br/>\n<ul>\n<li>A change in major version denotes it has some breaking changes. The old API is incompatible with our old code. (Ex 1.20.0 -> 2.0.0)</li>\n<li>A change in minor version denotes it has some new functionalities and might have some bug fixes that are compatible (hopefully) with old dependency version. (Ex 1.2.0 -> 1.3.0)</li>\n<li>A change in patch version denotes it has some bug fixes and there is no API or functionality changes. (Ex 1.2.2 -> 1.2.3)</li>\n<li>(Optional) prerelease tags (alpha/beta) - Added for our own convenience. varies dependencies to dependencies.</li>\n</ul>\n<blockquote>\n<p>Sample projects which follows semantic versioning,\n<a href=\"https://github.com/emberjs/ember.js/releases\">Ember.js</a>, <a href=\"https://github.com/facebook/react/releases\">React.js</a>, <a href=\"https://reactjs.org/docs/faq-versioning.html\">More about react versioning policy</a>.</p>\n</blockquote>\n<br/>\nSome important rules of SemVer. Go through this. You will understand the four points mentioned above.\n<br/>\n<br/>\n<ul>\n<li>Each element MUST increase numerically (Non-Zero and positive number). For instance: 1.9.0 -> 1.10.0 -> 1.11.0</li>\n<li>Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications MUST be released as a new version. (Once the code is tested with some version, It is always the same forever).</li>\n<li>prerelease tags gets lower precedence. ex, (1.0.0-alpha &#x3C; 1.0.0)</li>\n<li>When a major version is bumped. minor and patch versions are reset back to zero. (Ex, 1.23.4 -> 2.0.0).</li>\n</ul>\n<p>For more details, check <a href=\"https://semver.org/\">here</a>.</p>","timeToRead":3,"frontmatter":{"title":"Why you should care about semantic versioning (SemVer).","date":"2019-06-16T15:04:20.901Z","tags":["Semantic Versioning","NPM","packages","dependency management"],"render_in_place":null,"path":"sem-ver"}}}]},"categories":{"group":[{"name":"algorithm","count":1},{"name":"android","count":1},{"name":"blogging","count":1},{"name":"cmdline","count":1},{"name":"database","count":1},{"name":"general","count":1},{"name":"java","count":2},{"name":"personal","count":1},{"name":"productivity","count":4},{"name":"programming","count":5},{"name":"software development","count":2},{"name":"today I learned","count":2},{"name":"tools","count":1}]}},"pageContext":{"pageNumber":1,"humanPageNumber":2,"skip":5,"limit":10,"numberOfPages":3,"previousPagePath":"/blog","nextPagePath":"/blog/page/3"}},"staticQueryHashes":["3128451518"]}