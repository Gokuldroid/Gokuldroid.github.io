{"componentChunkName":"component---src-components-module-blog-post-index-jsx","path":"/posts/sem-ver","result":{"data":{"post":{"html":"<p>Dependency management is always hell.I was a bully once in updating my android app dependencies. Until that dark day came into the picture. Suddenly my app uninstallation events went up. Firebase crash reports waking me up now and then. I don't have billions of users. But still, I have some loyal users (I have around 2L. Not bad for some app developed for my personal use. If you are VLC user you can give it a shot - <a href=\"https://play.google.com/store/apps/details?id=tuple.me.vlcremote&#x26;hl=en\">VLC Stream and remote</a>).</p>\n<p>The update was very simple. I just wrapped my code in the try catch block to avoid crash ( I am yet to find the perfect solution for that ;-)) and updated some dependencies. that's it. The culprit was one of the support dependency I updated before. It broke the functionality of splash screen.without it, everything is meaningless in my app. As an indie developer, I don't have much time to test our pet projects and I don't have extensive test cases in my project. </p>\n<p>After that I have always thought, '<em>Why should I change something that isn't broken yet?</em>'. I was reluctant to change to support library dependencies until I had no other go. Because it always broke something in android. Android versioning was not great until they announce <a href=\"https://android-developers.googleblog.com/2018/05/announcing-new-sdk-versioning.html\">this</a>. </p>\n<p>The same applies to node projects, ember, react, angular, etc. while choosing dependencies, check whether it follows SemVer. Otherwise, make note of it in package.json (if you are in node projects) or build.gradle (if you are in android projects).So that you can be careful while updating those dependencies. To make our life easier, there are a set of rules that makes this process easier. semantic versioning (SemVer) is something that we can follow in our app releases too.</p>\n<br/>\n<blockquote>\n<p>SemVer is defined as major.minor.patch-(alpha/beta).As simple as that.\nEx, (1.2.14, 1.2.14-alpha). </p>\n</blockquote>\n<br/>\n<ul>\n<li>A change in major version denotes it has some breaking changes. The old API is incompatible with our old code. (Ex 1.20.0 -> 2.0.0)</li>\n<li>A change in minor version denotes it has some new functionalities and might have some bug fixes that are compatible (hopefully) with old dependency version. (Ex 1.2.0 -> 1.3.0)</li>\n<li>A change in patch version denotes it has some bug fixes and there is no API or functionality changes. (Ex 1.2.2 -> 1.2.3)</li>\n<li>(Optional) prerelease tags (alpha/beta) - Added for our own convenience. varies dependencies to dependencies.</li>\n</ul>\n<blockquote>\n<p>Sample projects which follows semantic versioning,\n<a href=\"https://github.com/emberjs/ember.js/releases\">Ember.js</a>, <a href=\"https://github.com/facebook/react/releases\">React.js</a>, <a href=\"https://reactjs.org/docs/faq-versioning.html\">More about react versioning policy</a>.</p>\n</blockquote>\n<br/>\nSome important rules of SemVer. Go through this. You will understand the four points mentioned above.\n<br/>\n<br/>\n<ul>\n<li>Each element MUST increase numerically (Non-Zero and positive number). For instance: 1.9.0 -> 1.10.0 -> 1.11.0</li>\n<li>Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications MUST be released as a new version. (Once the code is tested with some version, It is always the same forever).</li>\n<li>prerelease tags gets lower precedence. ex, (1.0.0-alpha &#x3C; 1.0.0)</li>\n<li>When a major version is bumped. minor and patch versions are reset back to zero. (Ex, 1.23.4 -> 2.0.0).</li>\n</ul>\n<p>For more details, check <a href=\"https://semver.org/\">here</a>.</p>","excerpt":"Dependency management is always hell.I was a bully once in updating my android app dependencies. Until that dark day came into the pictureâ€¦","frontmatter":{"title":"Why you should care about semantic versioning (SemVer).","tags":["Semantic Versioning","NPM","packages","dependency management"]}},"previousPost":{"frontmatter":{"title":"Java internals : part - 1"}},"nextPost":{"frontmatter":{"title":"Better cmdline"}}},"pageContext":{"pageId":"cf66202c-0f5f-525d-8867-a8e0ba829f75","previousPagePath":"/posts/java-internals-1","previousItem":{"node":{"id":"d6e09b3e-9e2c-5d0f-aafa-0bb556bf1f90","frontmatter":{"title":"Java internals : part - 1","path":"java-internals-1","date":"2019-06-17T18:21:41.620Z","categories":["java"]}}},"previousPageId":"d6e09b3e-9e2c-5d0f-aafa-0bb556bf1f90","nextPagePath":"/posts/better-cmdline-1","nextItem":{"node":{"id":"1f40e538-9b9b-5ccf-b1a0-baaa1194567b","frontmatter":{"title":"Better cmdline","path":"better-cmdline-1","date":"2019-06-09T12:25:19.116Z","categories":["tools","cmdline"]}}},"nextPageId":"1f40e538-9b9b-5ccf-b1a0-baaa1194567b"}}}